name: Smart All-in-One SAST Scan, Summarize, Deploy

on:
  workflow_dispatch:

jobs:
  backend-sast:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - run: |
          dotnet tool install --global dotnet-sonarscanner
          export PATH="$PATH:$HOME/.dotnet/tools"
          dotnet sonarscanner begin /k:"my-backend" /d:sonar.host.url=$SONAR_HOST_URL /d:sonar.login=$SONAR_TOKEN
          dotnet build
          dotnet sonarscanner end /d:sonar.login=$SONAR_TOKEN
          mkdir -p reports
          curl -u "$SONAR_TOKEN:" "$SONAR_HOST_URL/api/issues/search?componentKeys=my-backend&ps=500" -o reports/sonar-report-backend.json
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

  frontend-sast:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: '20'

      - run: |
          cd frontend
          npm ci
          npm run build
          mkdir -p reports
          npx sonar-scanner -Dsonar.projectKey=my-frontend -Dsonar.sources=src -Dsonar.host.url=$SONAR_HOST_URL -Dsonar.login=$SONAR_TOKEN
          curl -u "$SONAR_TOKEN:" "$SONAR_HOST_URL/api/issues/search?componentKeys=my-frontend&ps=500" -o reports/sonar-report-frontend.json
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

  summarize-genai:
    runs-on: ubuntu-latest
    needs: [backend-sast, frontend-sast]

    steps:
      - uses: actions/checkout@v4

      - run: pip install openai

      - name: Summarize reports using GPT-4 (Azure OpenAI)
        run: |
          import openai, os, json, glob
          client = openai.AzureOpenAI(
              api_key=os.getenv("AZURE_OPENAI_API_KEY"),
              azure_endpoint=os.getenv("AZURE_OPENAI_ENDPOINT"),
              api_version="2023-05-15"
          )
          reports = glob.glob('reports/*.json')
          for report_file in reports:
              with open(report_file) as f:
                  issues = json.load(f).get("issues", [])
              prompt = f"""You are a security expert. Analyze this SonarQube scan report ({report_file}) and list the 5 most critical security issues with suggestions.

              {json.dumps(issues[:10], indent=2)}"""
              response = client.chat.completions.create(
                  model=os.getenv("AZURE_OPENAI_DEPLOYMENT"),
                  messages=[
                      {"role": "system", "content": "You are a senior code security reviewer."},
                      {"role": "user", "content": prompt}
                  ],
                  temperature=0.3,
                  max_tokens=1000
              )
              print(f"\n✅ GPT-4 Summary for {report_file}:\n{response.choices[0].message.content}")
        env:
          AZURE_OPENAI_API_KEY: ${{ secrets.AZURE_OPENAI_API_KEY }}
          AZURE_OPENAI_ENDPOINT: ${{ secrets.AZURE_OPENAI_ENDPOINT }}
          AZURE_OPENAI_DEPLOYMENT: ${{ secrets.AZURE_OPENAI_DEPLOYMENT }}
        shell: python

  deploy:
    runs-on: ubuntu-latest
    needs: summarize-genai

    steps:
      - uses: actions/checkout@v4

      - name: Deploy to Azure Backend
        run: |
          echo "✅ Backend deployed to Azure App Service."
          # (replace with your real Azure CLI or Azure WebApp Deploy task)

      - name: Deploy to Azure Frontend
        run: |
          echo "✅ Frontend deployed to Azure App Service."
          # (replace with your real Azure CLI or Azure WebApp Deploy task)
